# SPDX-FileCopyrightText: Â© 2023 Siemens AG
# SPDX-License-Identifier: MIT

# https://taskfile.dev

version: "3"

output: interleaved
silent: true

vars:
  GO_TEST_FLAGS: -tags=testing -v -count=1 -timeout=1m

tasks:
  default:
    - task --list

  install:
    desc: Install Go tools required to build, test, and release DDA; install module dependencies
    cmds:
      - go install github.com/client9/misspell/cmd/misspell@latest # check code for misspelled English words
      - go install honnef.co/go/tools/cmd/staticcheck@latest # lint code
      - go install github.com/securego/gosec/v2/cmd/gosec@latest # check security of code
      - go install golang.org/x/pkgsite/cmd/pkgsite@latest # documentation generator
      - go install google.golang.org/protobuf/cmd/protoc-gen-go@latest # Go plugin for protoc compiler
      - go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest # Go gRPC plugin for protoc compiler
      - go install github.com/goreleaser/goreleaser@latest # goreleaser for task release-dry
      - go mod download # install module dependencies
      - go mod verify # verify downloaded module dependencies

  deps:
    desc: Upgrade DDA module dependencies to latest version
    cmds:
      - go get -u all
      - go mod tidy

  lint:
    desc: Run misspell, staticcheck, go vet, and gosec on source code
    cmds:
      - misspell -i mosquitto .
      - staticcheck -tags=testing ./...
      - go vet -tags=testing ./...
      - gosec -quiet ./...

  doc:
    desc: Serve DDA documentation locally at http://localhost:8080/github.com/coatyio/dda
    cmds:
      - pkgsite -open

  broker:
    desc: Start an MQTT 5 Broker for development purposes
    ignore_error: true # Skip failure message on receiving exit signal.
    cmds:
      - go run testdata/cmd/broker/broker.go

  run:
    desc: Compile and run DDA
    ignore_error: true # Skip failure message on receiving exit signal.
    cmds:
      - go run cmd/dda/dda.go

  mkcert:
    desc: Create self-signed TLS server and client certificates for testing
    ignore_error: true # Skip failure message on receiving exit signal.
    cmds:
      - go run testdata/cmd/mkcert/mkcert.go -outc testdata/certs/dda-server-cert.pem -outk testdata/certs/dda-server-key.pem
      - go run testdata/cmd/mkcert/mkcert.go -outc testdata/certs/dda-client-cert.pem -outk testdata/certs/dda-client-key.pem

  test:
    desc: Run all testing packages with logging disabled
    cmds:
      - go test {{.GO_TEST_FLAGS}} ./apis/grpc/ ./services/... ./config/... ./dda/test/...

  test-log:
    desc: Run all testing packages with logging enabled
    env:
      DDA_TEST_LOG: true
    cmds:
      - go test {{.GO_TEST_FLAGS}} ./apis/grpc/ ./services/... ./config/... ./dda/test/...

  cover:
    desc: Compute coverage of all testing packages and create HTML report
    vars:
      COVERPKG: ./apis/grpc/,./services/...,./config/...,./dda
    cmds:
      - go test {{.GO_TEST_FLAGS}} -covermode=count -coverpkg="{{.COVERPKG}}" -coverprofile ./coverage/coverage.out ./apis/grpc/ ./services/... ./config/... ./dda/test/...
      - go tool cover -html ./coverage/coverage.out -o ./coverage/coverage.html
      - go tool cover -func coverage/coverage.out

  bench:
    desc: Run all benchmarks in series
    cmds:
      - go test -tags=testing -v -bench=. -benchtime=10s -benchmem -run=notests -p=1 ./dda/test/...

  protoc:
    desc: Run Protobuf compiler to create Protobuf and gRPC service stubs
    vars:
      PROTO_PATH: apis/grpc/protos
      PROTO_FILE_COM: com.proto
      PROTO_FILE_STATE: state.proto
      PROTO_FILE_STORE: store.proto
      GO_OUT: apis/grpc/stubs/golang
      GO_STUBS_PKG: github.com/coatyio/dda/{{.GO_OUT}}
      GO_OPT_MOD: module={{.GO_STUBS_PKG}}
      GO_OPT_COM: M{{.PROTO_FILE_COM}}={{.GO_STUBS_PKG}}
      GO_OPT_STATE: M{{.PROTO_FILE_STATE}}={{.GO_STUBS_PKG}}
      GO_OPT_STORE: M{{.PROTO_FILE_STORE}}={{.GO_STUBS_PKG}}
      JS_OUT: apis/grpc/stubs/js
    cmds:
      - >
        protoc --proto_path={{.PROTO_PATH}}
        --go_opt={{.GO_OPT_MOD}} --go_opt={{.GO_OPT_COM}} --go_opt={{.GO_OPT_STATE}} --go_opt={{.GO_OPT_STORE}}
        --go_out={{.GO_OUT}}
        --go-grpc_opt={{.GO_OPT_MOD}} --go-grpc_opt={{.GO_OPT_COM}} --go-grpc_opt={{.GO_OPT_STATE}} --go-grpc_opt={{.GO_OPT_STORE}}
        --go-grpc_out={{.GO_OUT}}
        --js_out=import_style=commonjs:{{.JS_OUT}}
        --grpc-web_out=import_style=commonjs+dts,mode=grpcwebtext:{{.JS_OUT}}
        {{.PROTO_FILE_COM}} {{.PROTO_FILE_STATE}} {{.PROTO_FILE_STORE}}

  release-dry:
    desc: Create dry release publishing release assets in local dist folder and local Docker registry
    cmds:
      - goreleaser release --clean --snapshot --skip=publish

  release:
    desc: Trigger GitHub Actions release workflow by pushing current branch including version tag
    # Remove trailing character from read input on Windows due to
    # realization in Taskfile shell interpreter mvdan.cc/sh/v3.
    cmd: |
      test -n "$(git status --porcelain)" && echo "git is in a dirty state: commit uncommitted and unstaged changes first" && exit;
      echo "Enter release version (in semver format, e.g. 1.0.7):";
      read REL_VERSION;
      # Remove trailing character from read input on Windows due to
      # realization in Taskfile shell interpreter mvdan.cc/sh/v3.
      {{if eq OS "windows"}}REL_VERSION="${REL_VERSION%?}"{{end}}
      echo "Enter release notes:";
      read REL_NOTES;
      echo "";
      echo "Creating version tag v${REL_VERSION}";
      git tag -f -a -m "${REL_NOTES}" "v${REL_VERSION}";
      echo "Pushing current branch with tags";
      git push --follow-tags;
    silent: false
