// SPDX-FileCopyrightText: Â© 2023 Siemens AG
// SPDX-License-Identifier: MIT

// Service definition of DDA Communication API.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.23.3
// source: com.proto

package com

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A SubscriptionFilter defines the context that determines which publications
// should be transmitted to a subscriber.
type SubscriptionFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of Event, Action, or Query to be filtered (required).
	//
	// Must be a non-empty string consisting of lower-case ASCII letters ('a' to
	// 'z'), upper-case ASCII letters ('A' to 'Z'), ASCII digits ('0' to '9'),
	// ASCII dot ('.'), ASCII hyphen (-), or ASCII underscore (_).
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Name to be used for a shared subscription (optional).
	//
	// A shared subscription is not routed to all subscribers specifying the
	// same Scope, Type, and Share, but only to one of these. Shared
	// subscriptions may be used to load balance published tasks so as to
	// distribute workload evenly among a set of subscribers. Another use case
	// is high availability through redundancy where a secondary subscribers
	// takes over published tasks if the primary subscriber is no longer
	// reachable (hot standby). Typically, shared subscriptions are used with
	// the Action pattern.
	//
	// A published Event, Action, or Query is matching a shared subscription
	// named Share if it provides the same Scope and Type. If multiple shared
	// subscriptions with different Share names but the same Scope and Type
	// match such a publication, it will be routed to one (and only one) in each
	// Share group.
	//
	// If non-empty, must consist of lower-case ASCII letters ('a' to 'z'),
	// upper-case ASCII letters ('A' to 'Z'), ASCII digits ('0' to '9'), ASCII
	// dot ('.'), ASCII hyphen (-), or ASCII underscore (_).
	//
	// If not present or an empty string, the related subscription is not
	// shared.
	Share string `protobuf:"bytes,2,opt,name=share,proto3" json:"share,omitempty"`
}

func (x *SubscriptionFilter) Reset() {
	*x = SubscriptionFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriptionFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionFilter) ProtoMessage() {}

func (x *SubscriptionFilter) ProtoReflect() protoreflect.Message {
	mi := &file_com_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionFilter.ProtoReflect.Descriptor instead.
func (*SubscriptionFilter) Descriptor() ([]byte, []int) {
	return file_com_proto_rawDescGZIP(), []int{0}
}

func (x *SubscriptionFilter) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *SubscriptionFilter) GetShare() string {
	if x != nil {
		return x.Share
	}
	return ""
}

// Event is a message expressing an occurrence and its context. An event may
// occur due to a raised or observed signal, a state change, an elapsed timer,
// an observed or taken measurement, or any other announcement or activity. An
// Event is routed from an event producer (source) to interested event consumers
// using pub-sub messaging.
type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of event related to the originating occurrence (required).
	//
	// Type is used as a subscription filter for routing the event to consumers
	// via pub-sub messaging. Must be a non-empty string consisting of
	// lower-case ASCII letters ('a' to 'z'), upper-case ASCII letters ('A' to
	// 'Z'), ASCII digits ('0' to '9'), ASCII dot ('.'), ASCII hyphen (-), or
	// ASCII underscore (_).
	//
	// Follow a consistent naming convention for types throughout an application
	// to avoid naming collisions. For example, Type could use Reverse Domain
	// Name Notation (com.mycompany.myapp.mytype) or some other hierarchical
	// naming pattern with some levels in the hierarchy separated by dots,
	// hyphens, or underscores.
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Identifies the event (required).
	//
	// Id must be non-empty and unique within the scope of the producer.
	// Producers must ensure that (Source, Id) is unique for each distinct
	// event. Consumers may assume that events with identical Source and Id are
	// duplicates.
	//
	// Typically, Id is a UUID or a counter maintained by the producer.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Identifies the context in which the event occurred (required).
	//
	// An event source is defined by the event producer. Producers must ensure
	// that (Source, Id) is unique for each distinct event. Source must be
	// non-empty.
	//
	// Typically, Source may be a URI describing the organization publishing the
	// event or the process that generates the event.
	Source string `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`
	// Timestamp when the occurrence happened or when the event data has been
	// generated (optional).
	//
	// If present, must adhere to the format specified in [RFC 3339]. An empty
	// string value indicates that a timestamp is not available or needed.
	//
	// [RFC 3339]: https://www.rfc-editor.org/rfc/rfc3339
	Time string `protobuf:"bytes,4,opt,name=time,proto3" json:"time,omitempty"`
	// Domain-specific payload information about the occurrence (required).
	//
	// Encoding and decoding of the transmitted binary data is left to the user of
	// the API interface. Any binary serialization format can be used.
	Data []byte `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
	// Content type of data value (optional).
	//
	// If present, it must adhere to the format specified in [RFC 2046]. An empty
	// string value indicates that a content type is implied by the application.
	//
	// [RFC 2046]: https://www.rfc-editor.org/rfc/rfc2046
	DataContentType string `protobuf:"bytes,6,opt,name=data_content_type,json=dataContentType,proto3" json:"data_content_type,omitempty"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_com_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_com_proto_rawDescGZIP(), []int{1}
}

func (x *Event) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Event) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Event) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Event) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

func (x *Event) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Event) GetDataContentType() string {
	if x != nil {
		return x.DataContentType
	}
	return ""
}

// Empty acknowledgement message.
type Ack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Ack) Reset() {
	*x = Ack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ack) ProtoMessage() {}

func (x *Ack) ProtoReflect() protoreflect.Message {
	mi := &file_com_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ack.ProtoReflect.Descriptor instead.
func (*Ack) Descriptor() ([]byte, []int) {
	return file_com_proto_rawDescGZIP(), []int{2}
}

// Action is a structure expressing an action, command, or operation to be
// carried out by interested action consumers. An Action is routed from an
// action invoker to interested action consumers using pub-sub messaging.
type Action struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of action, command or operation to be performed (required).
	//
	// Type is used as a subscription filter for routing the action to consumers
	// via pub-sub messaging. Must be a non-empty string consisting of
	// lower-case ASCII letters ('a' to 'z'), upper-case ASCII letters ('A' to
	// 'Z'), ASCII digits ('0' to '9'), ASCII dot ('.'), ASCII hyphen (-), or
	// ASCII underscore (_).
	//
	// Follow a consistent naming convention for types throughout an application
	// to avoid naming collisions. For example, Type could use Reverse Domain
	// Name Notation (com.mycompany.myapp.mytype) or some other hierarchical
	// naming pattern with some levels in the hierarchy separated by dots,
	// hyphens, or underscores.
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Identifies the action (required).
	//
	// Id must be non-empty and unique within the scope of the action invoker.
	// Invokers must ensure that (Source, Id) is unique for each distinct
	// action. Consumers may assume that actions with identical Source and Id
	// are duplicates.
	//
	// Typically, Id is a UUID or a counter maintained by the invoker.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Identifies the context in which the action is invoked (required).
	//
	// An action source is defined by the action invoker. Invokers must ensure
	// that (Source, Id) is unique for each distinct action. Source must be
	// non-empty.
	//
	// Typically, Source may be a URI describing the organization publishing the
	// action or the process that invokes the action.
	Source string `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`
	// Parameter data of the action (optional).
	//
	// Encoding and decoding of the transmitted binary data is left to the user of
	// the API interface. Any binary serialization format can be used.
	Params []byte `protobuf:"bytes,4,opt,name=params,proto3" json:"params,omitempty"`
	// Content type of params value (optional).
	//
	// If present, it must adhere to the format specified in [RFC 2046]. An empty
	// string value indicates that a content type is implied by the application.
	//
	// [RFC 2046]: https://www.rfc-editor.org/rfc/rfc2046
	DataContentType string `protobuf:"bytes,5,opt,name=data_content_type,json=dataContentType,proto3" json:"data_content_type,omitempty"`
}

func (x *Action) Reset() {
	*x = Action{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Action) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action) ProtoMessage() {}

func (x *Action) ProtoReflect() protoreflect.Message {
	mi := &file_com_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action.ProtoReflect.Descriptor instead.
func (*Action) Descriptor() ([]byte, []int) {
	return file_com_proto_rawDescGZIP(), []int{3}
}

func (x *Action) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Action) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Action) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Action) GetParams() []byte {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *Action) GetDataContentType() string {
	if x != nil {
		return x.DataContentType
	}
	return ""
}

// ActionResult is a structure containing resulting information returned to the
// invoker of an Action. Each interested action consumer may transmit its own
// action result(s) independently of the others. Multiple ActionResults over
// time may be generated by a consumer for a single Action to transmit
// progressive series of results.
type ActionResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifies the context, in which the action is executed (required).
	//
	// Typically, Context may be a URI describing the organization consuming the
	// action or the process that carries out the action.
	Context string `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	// Resulting data to be returned to the action invoker (required).
	//
	// Note that errors occurring while processing an action must also be encoded
	// as result data in an application-specific way.
	//
	// Encoding and decoding of the transmitted binary data is left to the user of
	// the API interface. Any binary serialization format can be used.
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	// Content type of data value (optional).
	//
	// If present, it must adhere to the format specified in [RFC 2046]. An empty
	// string value indicates that a content type is implied by the application.
	//
	// [RFC 2046]: https://www.rfc-editor.org/rfc/rfc2046
	DataContentType string `protobuf:"bytes,3,opt,name=data_content_type,json=dataContentType,proto3" json:"data_content_type,omitempty"`
	// The sequence number of a multi-result response (required for progressive
	// responses only).
	//
	// A zero value or -1 indicates a single result. If multiple ActionResults
	// are to be returned, the sequence number is 1 for the first result and
	// incremented by one with each newly generated result. If sequence number
	// overflows its maximum value 9223372036854775807, the next value should
	// revert to 1. A final result should be indicated by using the additive
	// inverse of the generated sequence number.
	//
	// A zero or negative sequence number indicates that no more results will be
	// published for the correlated action after the given one.
	SequenceNumber int64 `protobuf:"varint,4,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
}

func (x *ActionResult) Reset() {
	*x = ActionResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionResult) ProtoMessage() {}

func (x *ActionResult) ProtoReflect() protoreflect.Message {
	mi := &file_com_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionResult.ProtoReflect.Descriptor instead.
func (*ActionResult) Descriptor() ([]byte, []int) {
	return file_com_proto_rawDescGZIP(), []int{4}
}

func (x *ActionResult) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

func (x *ActionResult) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ActionResult) GetDataContentType() string {
	if x != nil {
		return x.DataContentType
	}
	return ""
}

func (x *ActionResult) GetSequenceNumber() int64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

// An Action with a correlation id used to correlate action results.
type ActionCorrelated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Original action.
	Action *Action `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty"`
	// An opaque ID generated by this service to correlate an ActionResult with an
	// Action.
	//
	// Each received Action is augmented with a unique correlation ID by this
	// service before being transmitted to a subscriber. A subscriber must include
	// this field in all associated ActionResultCorrelated messages.
	CorrelationId string `protobuf:"bytes,2,opt,name=correlation_id,json=correlationId,proto3" json:"correlation_id,omitempty"`
}

func (x *ActionCorrelated) Reset() {
	*x = ActionCorrelated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionCorrelated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionCorrelated) ProtoMessage() {}

func (x *ActionCorrelated) ProtoReflect() protoreflect.Message {
	mi := &file_com_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionCorrelated.ProtoReflect.Descriptor instead.
func (*ActionCorrelated) Descriptor() ([]byte, []int) {
	return file_com_proto_rawDescGZIP(), []int{5}
}

func (x *ActionCorrelated) GetAction() *Action {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *ActionCorrelated) GetCorrelationId() string {
	if x != nil {
		return x.CorrelationId
	}
	return ""
}

// An ActionResult with a correlation id used to correlate the corresponding
// action.
type ActionResultCorrelated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Original action result.
	Result *ActionResult `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	// An opaque ID generated by this service to correlate an ActionResult with an
	// Action (required).
	//
	// Each received Action is augmented with a unique correlation ID by this
	// service before being transmitted to a subscriber. A subscriber must include
	// this field in all associated ActionResultCorrelated messages.
	CorrelationId string `protobuf:"bytes,2,opt,name=correlation_id,json=correlationId,proto3" json:"correlation_id,omitempty"`
}

func (x *ActionResultCorrelated) Reset() {
	*x = ActionResultCorrelated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionResultCorrelated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionResultCorrelated) ProtoMessage() {}

func (x *ActionResultCorrelated) ProtoReflect() protoreflect.Message {
	mi := &file_com_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionResultCorrelated.ProtoReflect.Descriptor instead.
func (*ActionResultCorrelated) Descriptor() ([]byte, []int) {
	return file_com_proto_rawDescGZIP(), []int{6}
}

func (x *ActionResultCorrelated) GetResult() *ActionResult {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *ActionResultCorrelated) GetCorrelationId() string {
	if x != nil {
		return x.CorrelationId
	}
	return ""
}

// Query is a structure expressing a query to be answered by interested query
// consumers. A Query is routed from a querier to interested query consumers
// using pub-sub messaging.
type Query struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of query indicating intent or desired result (required).
	//
	// Type is used as a subscription filter for routing the query to consumers
	// via pub-sub messaging. Must be a non-empty string consisting of
	// lower-case ASCII letters ('a' to 'z'), upper-case ASCII letters ('A' to
	// 'Z'), ASCII digits ('0' to '9'), ASCII dot ('.'), ASCII hyphen (-), or
	// ASCII underscore (_).
	//
	// Follow a consistent naming convention for types throughout an application
	// to avoid naming collisions. For example, Type could use Reverse Domain
	// Name Notation (com.mycompany.myapp.mytype) or some other hierarchical
	// naming pattern with some levels in the hierarchy separated by dots,
	// hyphens, or underscores.
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Identifies the query (required).
	//
	// Id must be non-empty and unique within the scope of the querier. Queriers
	// must ensure that (Source, Id) is unique for each distinct query.
	// Consumers may assume that queries with identical Source and Id are
	// duplicates.
	//
	// Typically, Id is a UUID or a counter maintained by the querier.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Identifies the context in which the query is posed (required).
	//
	// A query source is defined by the querier. Queriers must ensure that
	// (Source, Id) is unique for each distinct query. Source must be non-empty.
	//
	// Typically, Source may be a URI describing the organization publishing the
	// query or the process that poses the query.
	Source string `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`
	// Query data represented as indicated by query format (required).
	//
	// Encoding and decoding of the transmitted binary data is left to the user of
	// the API interface. Any binary serialization format can be used.
	Data []byte `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	// Content type of data value (optional).
	//
	// If present, it must adhere to the format specified in [RFC 2046]. An empty
	// string value indicates that a content type is implied by the application.
	//
	// The context type should represent the query language/format. For example, a
	// GraphQL query should use "application/graphql" and a SPARQL query should
	// use "application/sparql-query".
	//
	// [RFC 2046]: https://www.rfc-editor.org/rfc/rfc2046
	DataContentType string `protobuf:"bytes,5,opt,name=data_content_type,json=dataContentType,proto3" json:"data_content_type,omitempty"`
}

func (x *Query) Reset() {
	*x = Query{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Query) ProtoMessage() {}

func (x *Query) ProtoReflect() protoreflect.Message {
	mi := &file_com_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Query.ProtoReflect.Descriptor instead.
func (*Query) Descriptor() ([]byte, []int) {
	return file_com_proto_rawDescGZIP(), []int{7}
}

func (x *Query) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Query) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Query) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Query) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Query) GetDataContentType() string {
	if x != nil {
		return x.DataContentType
	}
	return ""
}

// QueryResult is a structure containing resulting information returned to the
// querier. Each interested query consumer may transmit its own query result(s)
// independently of the others. Multiple QueryResults over time may be generated
// by a consumer for a single Query to transmit live query results whenever the
// query yields new results due to update operations on the database.
type QueryResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifies the context, in which the query is executed (required).
	//
	// Typically, Context may be a URI describing the organization consuming the
	// query or the process that retrieves query result data.
	Context string `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	// Query result data represented as indicated by query format (required).
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	// Content type of data value (optional).
	//
	// If present, it must adhere to the format specified in [RFC 2046]. An empty
	// string value indicates that a content type is implied by the application.
	//
	// If present, use MIME Content Types to specify the query result format. For
	// example, use "application/sql" for a SQL query result,
	// "application/graphql" for a GraphQL query result,
	// "application/sparql-results+json" for a SPARQL query result encoded in
	// JSON.
	//
	// [RFC 2046]: https://www.rfc-editor.org/rfc/rfc2046
	DataContentType string `protobuf:"bytes,3,opt,name=data_content_type,json=dataContentType,proto3" json:"data_content_type,omitempty"`
	// The sequence number of a multi-result live query (required for live query
	// responses only).
	//
	// A zero value or -1 indicates a single result. If multiple QueryResults
	// are to be returned, the sequence number is 1 for the first result and
	// incremented by one with each newly generated result. If sequence number
	// overflows its maximum value 9223372036854775807, the next value should
	// revert to 1. A final result should be indicated by using the additive
	// inverse of the generated sequence number.
	//
	// A zero or negative sequence number indicates that no more results will be
	// published for the correlated action after the given one.
	SequenceNumber int64 `protobuf:"varint,4,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
}

func (x *QueryResult) Reset() {
	*x = QueryResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryResult) ProtoMessage() {}

func (x *QueryResult) ProtoReflect() protoreflect.Message {
	mi := &file_com_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryResult.ProtoReflect.Descriptor instead.
func (*QueryResult) Descriptor() ([]byte, []int) {
	return file_com_proto_rawDescGZIP(), []int{8}
}

func (x *QueryResult) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

func (x *QueryResult) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *QueryResult) GetDataContentType() string {
	if x != nil {
		return x.DataContentType
	}
	return ""
}

func (x *QueryResult) GetSequenceNumber() int64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

// A Query with a correlation id used to correlate query results.
type QueryCorrelated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Original query.
	Query *Query `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	// An opaque ID generated by this service to correlate a QueryResult with a
	// Query.
	//
	// Each received Query is augmented with a unique correlation ID by this
	// service before being transmitted to a subscriber. A subscriber must include
	// this field in all associated QueryResultCorrelated messages.
	CorrelationId string `protobuf:"bytes,2,opt,name=correlation_id,json=correlationId,proto3" json:"correlation_id,omitempty"`
}

func (x *QueryCorrelated) Reset() {
	*x = QueryCorrelated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryCorrelated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCorrelated) ProtoMessage() {}

func (x *QueryCorrelated) ProtoReflect() protoreflect.Message {
	mi := &file_com_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCorrelated.ProtoReflect.Descriptor instead.
func (*QueryCorrelated) Descriptor() ([]byte, []int) {
	return file_com_proto_rawDescGZIP(), []int{9}
}

func (x *QueryCorrelated) GetQuery() *Query {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *QueryCorrelated) GetCorrelationId() string {
	if x != nil {
		return x.CorrelationId
	}
	return ""
}

// A QueryResult with a correlation id used to correlate the corresponding
// query.
type QueryResultCorrelated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Original query result.
	Result *QueryResult `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	// An opaque ID generated by this service to correlate a QueryResult with a
	// Query (required).
	//
	// Each received Query is augmented with a unique correlation ID by this
	// service before being transmitted to a subscriber. A subscriber must include
	// this field in all associated QueryResultCorrelated messages.
	CorrelationId string `protobuf:"bytes,2,opt,name=correlation_id,json=correlationId,proto3" json:"correlation_id,omitempty"`
}

func (x *QueryResultCorrelated) Reset() {
	*x = QueryResultCorrelated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryResultCorrelated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryResultCorrelated) ProtoMessage() {}

func (x *QueryResultCorrelated) ProtoReflect() protoreflect.Message {
	mi := &file_com_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryResultCorrelated.ProtoReflect.Descriptor instead.
func (*QueryResultCorrelated) Descriptor() ([]byte, []int) {
	return file_com_proto_rawDescGZIP(), []int{10}
}

func (x *QueryResultCorrelated) GetResult() *QueryResult {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *QueryResultCorrelated) GetCorrelationId() string {
	if x != nil {
		return x.CorrelationId
	}
	return ""
}

var File_com_proto protoreflect.FileDescriptor

var file_com_proto_rawDesc = []byte{
	0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x64, 0x64, 0x61,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x31, 0x22, 0x3e, 0x0a, 0x12, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x68, 0x61, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x73, 0x68, 0x61, 0x72, 0x65, 0x22, 0x97, 0x01, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x05, 0x0a, 0x03, 0x41, 0x63, 0x6b, 0x22, 0x88, 0x01, 0x0a, 0x06, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x22, 0x91, 0x01, 0x0a, 0x0c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64,
	0x61, 0x74, 0x61, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27,
	0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x65, 0x0a, 0x10, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x64,
	0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x72, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x71,
	0x0a, 0x16, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f,
	0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x64, 0x61, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f,
	0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x22, 0x83, 0x01, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2a, 0x0a, 0x11, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x90, 0x01, 0x0a, 0x0b, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x61, 0x0a, 0x0f, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x12, 0x27, 0x0a,
	0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x64,
	0x64, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x6f, 0x0a,
	0x15, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x72, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x12, 0x2f, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x72, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x32, 0xc0,
	0x04, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x32, 0x0a,
	0x0c, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x11, 0x2e,
	0x64, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x1a, 0x0f, 0x2e, 0x64, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63,
	0x6b, 0x12, 0x45, 0x0a, 0x0e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x1e, 0x2e, 0x64, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x1a, 0x11, 0x2e, 0x64, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x30, 0x01, 0x12, 0x3f, 0x0a, 0x0d, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x2e, 0x64, 0x64, 0x61, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x18, 0x2e,
	0x64, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x30, 0x01, 0x12, 0x51, 0x0a, 0x0f, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x2e, 0x64,
	0x64, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x1c, 0x2e, 0x64,
	0x64, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x30, 0x01, 0x12, 0x4a, 0x0a, 0x13,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x22, 0x2e, 0x64, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x72,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x1a, 0x0f, 0x2e, 0x64, 0x64, 0x61, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x6b, 0x12, 0x3c, 0x0a, 0x0c, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x11, 0x2e, 0x64, 0x64, 0x61, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x17, 0x2e, 0x64, 0x64,
	0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x30, 0x01, 0x12, 0x4f, 0x0a, 0x0e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1e, 0x2e, 0x64, 0x64, 0x61, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x1b, 0x2e, 0x64, 0x64, 0x61, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x72, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x30, 0x01, 0x12, 0x48, 0x0a, 0x12, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x21, 0x2e,
	0x64, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x1a, 0x0f, 0x2e, 0x64, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63,
	0x6b, 0x42, 0x1e, 0x0a, 0x0d, 0x69, 0x6f, 0x2e, 0x64, 0x64, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x76, 0x31, 0x42, 0x0b, 0x44, 0x64, 0x61, 0x43, 0x6f, 0x6d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_com_proto_rawDescOnce sync.Once
	file_com_proto_rawDescData = file_com_proto_rawDesc
)

func file_com_proto_rawDescGZIP() []byte {
	file_com_proto_rawDescOnce.Do(func() {
		file_com_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_proto_rawDescData)
	})
	return file_com_proto_rawDescData
}

var file_com_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_com_proto_goTypes = []interface{}{
	(*SubscriptionFilter)(nil),     // 0: dda.com.v1.SubscriptionFilter
	(*Event)(nil),                  // 1: dda.com.v1.Event
	(*Ack)(nil),                    // 2: dda.com.v1.Ack
	(*Action)(nil),                 // 3: dda.com.v1.Action
	(*ActionResult)(nil),           // 4: dda.com.v1.ActionResult
	(*ActionCorrelated)(nil),       // 5: dda.com.v1.ActionCorrelated
	(*ActionResultCorrelated)(nil), // 6: dda.com.v1.ActionResultCorrelated
	(*Query)(nil),                  // 7: dda.com.v1.Query
	(*QueryResult)(nil),            // 8: dda.com.v1.QueryResult
	(*QueryCorrelated)(nil),        // 9: dda.com.v1.QueryCorrelated
	(*QueryResultCorrelated)(nil),  // 10: dda.com.v1.QueryResultCorrelated
}
var file_com_proto_depIdxs = []int32{
	3,  // 0: dda.com.v1.ActionCorrelated.action:type_name -> dda.com.v1.Action
	4,  // 1: dda.com.v1.ActionResultCorrelated.result:type_name -> dda.com.v1.ActionResult
	7,  // 2: dda.com.v1.QueryCorrelated.query:type_name -> dda.com.v1.Query
	8,  // 3: dda.com.v1.QueryResultCorrelated.result:type_name -> dda.com.v1.QueryResult
	1,  // 4: dda.com.v1.ComService.PublishEvent:input_type -> dda.com.v1.Event
	0,  // 5: dda.com.v1.ComService.SubscribeEvent:input_type -> dda.com.v1.SubscriptionFilter
	3,  // 6: dda.com.v1.ComService.PublishAction:input_type -> dda.com.v1.Action
	0,  // 7: dda.com.v1.ComService.SubscribeAction:input_type -> dda.com.v1.SubscriptionFilter
	6,  // 8: dda.com.v1.ComService.PublishActionResult:input_type -> dda.com.v1.ActionResultCorrelated
	7,  // 9: dda.com.v1.ComService.PublishQuery:input_type -> dda.com.v1.Query
	0,  // 10: dda.com.v1.ComService.SubscribeQuery:input_type -> dda.com.v1.SubscriptionFilter
	10, // 11: dda.com.v1.ComService.PublishQueryResult:input_type -> dda.com.v1.QueryResultCorrelated
	2,  // 12: dda.com.v1.ComService.PublishEvent:output_type -> dda.com.v1.Ack
	1,  // 13: dda.com.v1.ComService.SubscribeEvent:output_type -> dda.com.v1.Event
	4,  // 14: dda.com.v1.ComService.PublishAction:output_type -> dda.com.v1.ActionResult
	5,  // 15: dda.com.v1.ComService.SubscribeAction:output_type -> dda.com.v1.ActionCorrelated
	2,  // 16: dda.com.v1.ComService.PublishActionResult:output_type -> dda.com.v1.Ack
	8,  // 17: dda.com.v1.ComService.PublishQuery:output_type -> dda.com.v1.QueryResult
	9,  // 18: dda.com.v1.ComService.SubscribeQuery:output_type -> dda.com.v1.QueryCorrelated
	2,  // 19: dda.com.v1.ComService.PublishQueryResult:output_type -> dda.com.v1.Ack
	12, // [12:20] is the sub-list for method output_type
	4,  // [4:12] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_com_proto_init() }
func file_com_proto_init() {
	if File_com_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_com_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriptionFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Action); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionCorrelated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionResultCorrelated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Query); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryCorrelated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryResultCorrelated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_com_proto_goTypes,
		DependencyIndexes: file_com_proto_depIdxs,
		MessageInfos:      file_com_proto_msgTypes,
	}.Build()
	File_com_proto = out.File
	file_com_proto_rawDesc = nil
	file_com_proto_goTypes = nil
	file_com_proto_depIdxs = nil
}
