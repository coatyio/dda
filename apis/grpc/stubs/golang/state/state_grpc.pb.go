// SPDX-FileCopyrightText: Â© 2024 Siemens AG
// SPDX-License-Identifier: MIT

// Service definition of DDA distributed state synchronization API.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.3
// source: state.proto

package state

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	StateService_ProposeInput_FullMethodName            = "/dda.state.v1.StateService/ProposeInput"
	StateService_ObserveStateChange_FullMethodName      = "/dda.state.v1.StateService/ObserveStateChange"
	StateService_ObserveMembershipChange_FullMethodName = "/dda.state.v1.StateService/ObserveMembershipChange"
)

// StateServiceClient is the client API for StateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StateServiceClient interface {
	// Proposes the given input to the state synchronization group. It tries to
	// add the input to a log replicated by all members. If the input is accepted
	// into the log it counts as committed and is applied to each member's
	// key-value store. The resulting state of the key-value store after the
	// proposed input has been applied, if it ever gets applied, can be observed
	// with method ObserveStateChange.
	//
	// A majority of members need to give their consent before the given input is
	// accepted into the log. This might take indefinitely if no majority can be
	// reached, e.g. if too many members have crashed and cannot recover. In this
	// case the call never returns unless you specify a deadline/timeout with the
	// call.
	//
	// If the given input cannot be transmitted or if the operation fails due to a
	// non-retryable error, a gRPC error with status code UNAVAILABLE (14) is
	// signaled.
	ProposeInput(ctx context.Context, in *Input, opts ...grpc.CallOption) (*Ack, error)
	// Emits new input that has been proposed and applied to the replicated
	// key-value store as soon as the change becomes known to the local state
	// group member. A state change is triggered whenever a new input of type
	// INPUT_OPERATION_SET or INPUT_OPERATION_DELETE is committed. Upon
	// invocation, synthetic INPUT_OPERATION_SET state changes are triggered to
	// reproduce the current key-value entries of the replicated state.
	//
	// This server streaming call is automatically ended by this service once its
	// local member leaves the group.
	//
	// To stop receiving state changes, a gRPC client should cancel this server
	// streaming call or specify a deadline/timeout with this call from the very
	// start.
	//
	// If the operation fails, a gRPC error with status code UNAVAILABLE (14) is
	// signaled and the stream is aborted.
	ObserveStateChange(ctx context.Context, in *ObserveStateChangeParams, opts ...grpc.CallOption) (StateService_ObserveStateChangeClient, error)
	// Emits state member information on every state membership change as soon as
	// the update becomes known to the local member. State membership changes are
	// triggered whenever a member joins or leaves the state synchronization
	// group.
	//
	// This server streaming call is automatically ended by this service once its
	// local member leaves the group.
	//
	// To stop receiving membership changes, a gRPC client should cancel this
	// server streaming call or specify a deadline/timeout with this call from the
	// very start.
	//
	// If the operation fails, a gRPC error with status code UNAVAILABLE (14) is
	// signaled and the stream is aborted.
	ObserveMembershipChange(ctx context.Context, in *ObserveMembershipChangeParams, opts ...grpc.CallOption) (StateService_ObserveMembershipChangeClient, error)
}

type stateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStateServiceClient(cc grpc.ClientConnInterface) StateServiceClient {
	return &stateServiceClient{cc}
}

func (c *stateServiceClient) ProposeInput(ctx context.Context, in *Input, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, StateService_ProposeInput_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateServiceClient) ObserveStateChange(ctx context.Context, in *ObserveStateChangeParams, opts ...grpc.CallOption) (StateService_ObserveStateChangeClient, error) {
	stream, err := c.cc.NewStream(ctx, &StateService_ServiceDesc.Streams[0], StateService_ObserveStateChange_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &stateServiceObserveStateChangeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StateService_ObserveStateChangeClient interface {
	Recv() (*Input, error)
	grpc.ClientStream
}

type stateServiceObserveStateChangeClient struct {
	grpc.ClientStream
}

func (x *stateServiceObserveStateChangeClient) Recv() (*Input, error) {
	m := new(Input)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *stateServiceClient) ObserveMembershipChange(ctx context.Context, in *ObserveMembershipChangeParams, opts ...grpc.CallOption) (StateService_ObserveMembershipChangeClient, error) {
	stream, err := c.cc.NewStream(ctx, &StateService_ServiceDesc.Streams[1], StateService_ObserveMembershipChange_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &stateServiceObserveMembershipChangeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StateService_ObserveMembershipChangeClient interface {
	Recv() (*MembershipChange, error)
	grpc.ClientStream
}

type stateServiceObserveMembershipChangeClient struct {
	grpc.ClientStream
}

func (x *stateServiceObserveMembershipChangeClient) Recv() (*MembershipChange, error) {
	m := new(MembershipChange)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StateServiceServer is the server API for StateService service.
// All implementations must embed UnimplementedStateServiceServer
// for forward compatibility
type StateServiceServer interface {
	// Proposes the given input to the state synchronization group. It tries to
	// add the input to a log replicated by all members. If the input is accepted
	// into the log it counts as committed and is applied to each member's
	// key-value store. The resulting state of the key-value store after the
	// proposed input has been applied, if it ever gets applied, can be observed
	// with method ObserveStateChange.
	//
	// A majority of members need to give their consent before the given input is
	// accepted into the log. This might take indefinitely if no majority can be
	// reached, e.g. if too many members have crashed and cannot recover. In this
	// case the call never returns unless you specify a deadline/timeout with the
	// call.
	//
	// If the given input cannot be transmitted or if the operation fails due to a
	// non-retryable error, a gRPC error with status code UNAVAILABLE (14) is
	// signaled.
	ProposeInput(context.Context, *Input) (*Ack, error)
	// Emits new input that has been proposed and applied to the replicated
	// key-value store as soon as the change becomes known to the local state
	// group member. A state change is triggered whenever a new input of type
	// INPUT_OPERATION_SET or INPUT_OPERATION_DELETE is committed. Upon
	// invocation, synthetic INPUT_OPERATION_SET state changes are triggered to
	// reproduce the current key-value entries of the replicated state.
	//
	// This server streaming call is automatically ended by this service once its
	// local member leaves the group.
	//
	// To stop receiving state changes, a gRPC client should cancel this server
	// streaming call or specify a deadline/timeout with this call from the very
	// start.
	//
	// If the operation fails, a gRPC error with status code UNAVAILABLE (14) is
	// signaled and the stream is aborted.
	ObserveStateChange(*ObserveStateChangeParams, StateService_ObserveStateChangeServer) error
	// Emits state member information on every state membership change as soon as
	// the update becomes known to the local member. State membership changes are
	// triggered whenever a member joins or leaves the state synchronization
	// group.
	//
	// This server streaming call is automatically ended by this service once its
	// local member leaves the group.
	//
	// To stop receiving membership changes, a gRPC client should cancel this
	// server streaming call or specify a deadline/timeout with this call from the
	// very start.
	//
	// If the operation fails, a gRPC error with status code UNAVAILABLE (14) is
	// signaled and the stream is aborted.
	ObserveMembershipChange(*ObserveMembershipChangeParams, StateService_ObserveMembershipChangeServer) error
	mustEmbedUnimplementedStateServiceServer()
}

// UnimplementedStateServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStateServiceServer struct {
}

func (UnimplementedStateServiceServer) ProposeInput(context.Context, *Input) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProposeInput not implemented")
}
func (UnimplementedStateServiceServer) ObserveStateChange(*ObserveStateChangeParams, StateService_ObserveStateChangeServer) error {
	return status.Errorf(codes.Unimplemented, "method ObserveStateChange not implemented")
}
func (UnimplementedStateServiceServer) ObserveMembershipChange(*ObserveMembershipChangeParams, StateService_ObserveMembershipChangeServer) error {
	return status.Errorf(codes.Unimplemented, "method ObserveMembershipChange not implemented")
}
func (UnimplementedStateServiceServer) mustEmbedUnimplementedStateServiceServer() {}

// UnsafeStateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StateServiceServer will
// result in compilation errors.
type UnsafeStateServiceServer interface {
	mustEmbedUnimplementedStateServiceServer()
}

func RegisterStateServiceServer(s grpc.ServiceRegistrar, srv StateServiceServer) {
	s.RegisterService(&StateService_ServiceDesc, srv)
}

func _StateService_ProposeInput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateServiceServer).ProposeInput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StateService_ProposeInput_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateServiceServer).ProposeInput(ctx, req.(*Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateService_ObserveStateChange_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ObserveStateChangeParams)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StateServiceServer).ObserveStateChange(m, &stateServiceObserveStateChangeServer{stream})
}

type StateService_ObserveStateChangeServer interface {
	Send(*Input) error
	grpc.ServerStream
}

type stateServiceObserveStateChangeServer struct {
	grpc.ServerStream
}

func (x *stateServiceObserveStateChangeServer) Send(m *Input) error {
	return x.ServerStream.SendMsg(m)
}

func _StateService_ObserveMembershipChange_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ObserveMembershipChangeParams)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StateServiceServer).ObserveMembershipChange(m, &stateServiceObserveMembershipChangeServer{stream})
}

type StateService_ObserveMembershipChangeServer interface {
	Send(*MembershipChange) error
	grpc.ServerStream
}

type stateServiceObserveMembershipChangeServer struct {
	grpc.ServerStream
}

func (x *stateServiceObserveMembershipChangeServer) Send(m *MembershipChange) error {
	return x.ServerStream.SendMsg(m)
}

// StateService_ServiceDesc is the grpc.ServiceDesc for StateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dda.state.v1.StateService",
	HandlerType: (*StateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProposeInput",
			Handler:    _StateService_ProposeInput_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ObserveStateChange",
			Handler:       _StateService_ObserveStateChange_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ObserveMembershipChange",
			Handler:       _StateService_ObserveMembershipChange_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "state.proto",
}
